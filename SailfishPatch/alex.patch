diff --git a/sailfish/geo.py b/sailfish/geo.py
index bd57950..92a65ea 100644
--- a/sailfish/geo.py
+++ b/sailfish/geo.py
@@ -71,7 +71,7 @@ class LBMGeo(object):
 
     def _decode_orientation_and_param(self, code):
         return (code >> self._param_shift,
-                code & ((1 << (self._param_shift+1)) - 1))
+                code & ((1 << (self._param_shift)) - 1))
 
     @classmethod
     def _decode_node(cls, code):
diff --git a/sailfish/templates/binary_fluid.mako b/sailfish/templates/binary_fluid.mako
index 94beef2..aab9b24 100644
--- a/sailfish/templates/binary_fluid.mako
+++ b/sailfish/templates/binary_fluid.mako
@@ -157,10 +157,10 @@ ${kernel} void PrepareMacroFields(
 			%for dir in grid.dir2vecidx.keys():
 				else if (orientation == ${dir}) {
 					%if dim == 3:
-						igi += ${rel_offset(*(2*grid.dir_to_vec(dir)))};
+						igi -= ${rel_offset(*(grid.dir_to_vec(dir)))};
 					%else:
 						## rel_offset() needs a 3-vector, so make the z-coordinate 0
-						igi += ${rel_offset(*(list(2*grid.dir_to_vec(dir)) + [0]))};
+						igi -= ${rel_offset(*(list(grid.dir_to_vec(dir)) + [0]))};
 					%endif
 				}
 			%endfor
@@ -171,13 +171,19 @@ ${kernel} void PrepareMacroFields(
 	Dist fi;
 	float out;
 
-	getDist(&fi, dist1_in, igi);
+	getDist(&fi, dist1_in, gi);
 	get0thMoment(&fi, type, orientation, &out);
 	orho[gi] = out;
+	if (isWallNode(type)) {
+		orho[igi] = out;
+	}
 
-	getDist(&fi, dist2_in, igi);
+	getDist(&fi, dist2_in, gi);
 	get0thMoment(&fi, type, orientation, &out);
 	ophi[gi] = out;
+	if (isWallNode(type)) {
+		ophi[igi] = out;
+	}
 }
 
 ${kernel} void CollideAndPropagate(
@@ -204,6 +210,12 @@ ${kernel} void CollideAndPropagate(
 	int ncode = map[gi];
 	int type = decodeNodeType(ncode);
 
+	// Initialize the propagation buffer with invalid values.  This is necessary to prevent
+	// propagation into the fluid from nodes that do not take part in the simulation.
+	%for i in sym.get_prop_dists(grid, 1):
+		prop_${grid.idx_name[i]}[lx] = -1.0f;
+	%endfor
+
 	// Unused nodes do not participate in the simulation.
 	if (isUnusedNode(type))
 		return;
diff --git a/sailfish/templates/geo_helpers.mako b/sailfish/templates/geo_helpers.mako
index 5b8db60..908db1a 100644
--- a/sailfish/templates/geo_helpers.mako
+++ b/sailfish/templates/geo_helpers.mako
@@ -80,7 +80,7 @@ ${device_func} inline int decodeNodeOrientation(int nodetype) {
 }
 
 ${device_func} inline int decodeNodeParam(int nodetype) {
-	return (nodetype >> ${geo_misc_shift}) & ${(1 << (geo_param_shift+1))-1};
+	return (nodetype >> ${geo_misc_shift}) & ${(1 << geo_param_shift)-1};
 }
 
 ${device_func} inline int encodeBoundaryNode(int dir_mask, int obj_id) {
diff --git a/sailfish/templates/propagation.mako b/sailfish/templates/propagation.mako
index 275349e..18b3ff1 100644
--- a/sailfish/templates/propagation.mako
+++ b/sailfish/templates/propagation.mako
@@ -83,7 +83,10 @@
 
 <%def name="set_odist(dist_out, dist_in, idir, xoff, yoff, zoff, offset, local)">
 	%if local:
-		${get_odist(dist_out, idir, xoff, yoff, zoff, offset)} = prop_${grid.idx_name[idir]}[lx];
+		## Propagate only if the value comes from a node that takes part in the simulation.
+		if (prop_${grid.idx_name[idir]}[lx] != -1.0f) {
+			${get_odist(dist_out, idir, xoff, yoff, zoff, offset)} = prop_${grid.idx_name[idir]}[lx];
+		}
 	%else:
 		${get_odist(dist_out, idir, xoff, yoff, zoff, offset)} = ${dist_in}.${grid.idx_name[idir]};
 	%endif
@@ -154,6 +157,11 @@
 
 	${barrier()}
 
+	// Refill the propagation buffer with invalid values.
+	%for i in sym.get_prop_dists(grid, 1):
+		prop_${grid.idx_name[i]}[lx] = -1.0f;
+	%endfor
+
 	// W propagation in shared memory
 	if (lx > 0) {
 		%for i in sym.get_prop_dists(grid, -1):
diff --git a/sailfish/templates/single_fluid.mako b/sailfish/templates/single_fluid.mako
index 1bd1fa4..a60eb4c 100644
--- a/sailfish/templates/single_fluid.mako
+++ b/sailfish/templates/single_fluid.mako
@@ -144,6 +144,12 @@ ${kernel} void CollideAndPropagate(
 	int ncode = map[gi];
 	int type = decodeNodeType(ncode);
 
+	// Initialize the propagation buffer with invalid values.  This is necessary to prevent
+	// propagation into the fluid from nodes that do not take part in the simulation.
+	%for i in sym.get_prop_dists(grid, 1):
+		prop_${grid.idx_name[i]}[lx] = -1.0f;
+	%endfor
+
 	// Unused nodes do not participate in the simulation.
 	if (isUnusedNode(type))
 		return;
